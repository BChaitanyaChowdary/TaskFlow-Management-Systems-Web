{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor to handle token refresh\napi.interceptors.response.use(response => response, async error => {\n  var _error$response;\n  const originalRequest = error.config;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    try {\n      const refreshToken = localStorage.getItem('refresh');\n      if (refreshToken) {\n        const response = await axios.post(`${API_BASE_URL}/auth/token/refresh/`, {\n          refresh: refreshToken\n        });\n        const {\n          access\n        } = response.data;\n        localStorage.setItem('token', access);\n\n        // Retry the original request with new token\n        originalRequest.headers.Authorization = `Bearer ${access}`;\n        return api(originalRequest);\n      }\n    } catch (refreshError) {\n      // Refresh failed, redirect to login\n      localStorage.removeItem('token');\n      localStorage.removeItem('refresh');\n      window.location.href = '/login';\n    }\n  }\n  return Promise.reject(error);\n});\n\n// Auth API\nexport const authAPI = {\n  login: (email, password) => api.post('/auth/login/', {\n    email,\n    password\n  }),\n  register: userData => api.post('/auth/register/', userData),\n  getProfile: () => api.get('/auth/profile/'),\n  updateProfile: userData => api.put('/auth/profile/update/', userData),\n  changePassword: passwordData => api.post('/auth/change-password/', passwordData),\n  getUsers: () => api.get('/auth/users/'),\n  getEmployees: () => api.get('/auth/employees/'),\n  getUser: id => api.get(`/auth/users/${id}/`),\n  updateUser: (id, userData) => api.put(`/auth/users/${id}/`, userData),\n  deleteUser: id => api.delete(`/auth/users/${id}/`),\n  createUser: userData => api.post('/auth/users/', userData)\n};\n\n// Tasks API\nexport const tasksAPI = {\n  getTasks: params => api.get('/tasks/', {\n    params\n  }),\n  getTask: id => api.get(`/tasks/${id}/`),\n  createTask: taskData => api.post('/tasks/', taskData),\n  updateTask: (id, taskData) => api.put(`/tasks/${id}/`, taskData),\n  deleteTask: id => api.delete(`/tasks/${id}/`),\n  getTaskComments: taskId => api.get(`/tasks/${taskId}/comments/`),\n  createTaskComment: (taskId, commentData) => api.post(`/tasks/${taskId}/comments/`, commentData),\n  getTaskAnalytics: () => api.get('/tasks/analytics/'),\n  getKanbanTasks: () => api.get('/tasks/kanban/'),\n  updateTaskStatus: (taskId, status) => api.patch(`/tasks/${taskId}/status/`, {\n    status\n  })\n};\n\n// Projects API\nexport const projectsAPI = {\n  getProjects: () => api.get('/projects/'),\n  getProject: id => api.get(`/projects/${id}/`),\n  createProject: projectData => api.post('/projects/', projectData),\n  updateProject: (id, projectData) => api.put(`/projects/${id}/`, projectData),\n  deleteProject: id => api.delete(`/projects/${id}/`),\n  getProjectAnalytics: projectId => api.get(`/projects/${projectId}/analytics/`)\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","originalRequest","status","_retry","refreshToken","post","refresh","access","data","setItem","refreshError","removeItem","window","location","href","authAPI","login","email","password","register","userData","getProfile","get","updateProfile","put","changePassword","passwordData","getUsers","getEmployees","getUser","id","updateUser","deleteUser","delete","createUser","tasksAPI","getTasks","params","getTask","createTask","taskData","updateTask","deleteTask","getTaskComments","taskId","createTaskComment","commentData","getTaskAnalytics","getKanbanTasks","updateTaskStatus","patch","projectsAPI","getProjects","getProject","createProject","projectData","updateProject","deleteProject","getProjectAnalytics","projectId"],"sources":["C:/Users/B Chaitanya Chowdary/Desktop/Task/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';\r\n\r\n// Create axios instance\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor to add auth token\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor to handle token refresh\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  async (error) => {\r\n    const originalRequest = error.config;\r\n\r\n    if (error.response?.status === 401 && !originalRequest._retry) {\r\n      originalRequest._retry = true;\r\n\r\n      try {\r\n        const refreshToken = localStorage.getItem('refresh');\r\n        if (refreshToken) {\r\n          const response = await axios.post(`${API_BASE_URL}/auth/token/refresh/`, {\r\n            refresh: refreshToken,\r\n          });\r\n\r\n          const { access } = response.data;\r\n          localStorage.setItem('token', access);\r\n          \r\n          // Retry the original request with new token\r\n          originalRequest.headers.Authorization = `Bearer ${access}`;\r\n          return api(originalRequest);\r\n        }\r\n      } catch (refreshError) {\r\n        // Refresh failed, redirect to login\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('refresh');\r\n        window.location.href = '/login';\r\n      }\r\n    }\r\n\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Auth API\r\nexport const authAPI = {\r\n  login: (email, password) => api.post('/auth/login/', { email, password }),\r\n  register: (userData) => api.post('/auth/register/', userData),\r\n  getProfile: () => api.get('/auth/profile/'),\r\n  updateProfile: (userData) => api.put('/auth/profile/update/', userData),\r\n  changePassword: (passwordData) => api.post('/auth/change-password/', passwordData),\r\n  getUsers: () => api.get('/auth/users/'),\r\n  getEmployees: () => api.get('/auth/employees/'),\r\n  getUser: (id) => api.get(`/auth/users/${id}/`),\r\n  updateUser: (id, userData) => api.put(`/auth/users/${id}/`, userData),\r\n  deleteUser: (id) => api.delete(`/auth/users/${id}/`),\r\n  createUser: (userData) => api.post('/auth/users/', userData),\r\n};\r\n\r\n// Tasks API\r\nexport const tasksAPI = {\r\n  getTasks: (params) => api.get('/tasks/', { params }),\r\n  getTask: (id) => api.get(`/tasks/${id}/`),\r\n  createTask: (taskData) => api.post('/tasks/', taskData),\r\n  updateTask: (id, taskData) => api.put(`/tasks/${id}/`, taskData),\r\n  deleteTask: (id) => api.delete(`/tasks/${id}/`),\r\n  getTaskComments: (taskId) => api.get(`/tasks/${taskId}/comments/`),\r\n  createTaskComment: (taskId, commentData) => api.post(`/tasks/${taskId}/comments/`, commentData),\r\n  getTaskAnalytics: () => api.get('/tasks/analytics/'),\r\n  getKanbanTasks: () => api.get('/tasks/kanban/'),\r\n  updateTaskStatus: (taskId, status) => api.patch(`/tasks/${taskId}/status/`, { status }),\r\n};\r\n\r\n// Projects API\r\nexport const projectsAPI = {\r\n  getProjects: () => api.get('/projects/'),\r\n  getProject: (id) => api.get(`/projects/${id}/`),\r\n  createProject: (projectData) => api.post('/projects/', projectData),\r\n  updateProject: (id, projectData) => api.put(`/projects/${id}/`, projectData),\r\n  deleteProject: (id) => api.delete(`/projects/${id}/`),\r\n  getProjectAnalytics: (projectId) => api.get(`/projects/${projectId}/analytics/`),\r\n};\r\n\r\nexport default api;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}